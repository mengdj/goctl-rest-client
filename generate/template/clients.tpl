// Package {{.GroupPackage}}
// @file:{{.File}}
// @version:{{.Version}}
// @date:{{.Date}}
// Code generated by goctl-resty-client. DO NOT EDIT.
package {{.GroupPackage}}
import(
    "context"
    "{{.Pkg}}"
    "github.com/mengdj/goctl-rest-client/conf"
    "github.com/mengdj/goctl-rest-client/factory"
    "github.com/mengdj/goctl-rest-client/factory/rest"
)
//go:generate fieldalignment -fix {{.File}}
//begin
type(
    // Client
    Client interface{
        {{- range .Route -}}
        {{- range .Comment -}}
        // {{.}}
        {{- end}}
        // {{.Handler}} {{.Text}}
        {{.Handler}}(context.Context{{if .RequestName}},*{{$.Package}}.{{.RequestName}}{{- end}})(*{{$.Package}}.{{.ResponseName}},error)
        {{- end}}
        Invoke(context.Context,string,string,interface{},interface{}) error
    }
    clientFactory struct{
        factory.Client
    }
)

// MustClient
func MustClient(c conf.DiscoverClientConf,opts ...rest.RestOption) Client{
    return &clientFactory{
        Client:factory.NewRestDiscoverClient("{{.Destination}}",c,opts...),
    }
}

//Invoke extend
func (cf *clientFactory) Invoke(ctx context.Context,method string,path string,entity interface{},resp interface{}) error{
    return cf.Client.Invoke(ctx,method,path,entity,resp)
}

{{range .Route}}
{{range .Comment}}
// {{.}}
{{- end}}
// {{.Handler}} {{.Text}}
func (cf *clientFactory) {{.Handler}}(ctx context.Context{{if .RequestName}},entity *{{$.Package}}.{{.RequestName}}{{- end}})(resp *{{$.Package}}.{{.ResponseName}},err error){
    resp=new({{$.Package}}.{{.ResponseName}})
    err=cf.Invoke(ctx,"{{.Method}}","{{.Path}}",{{if .RequestName}}entity{{else}}nil{{- end}},resp)
    if nil!=err{
        return nil,err
    }
    return resp,nil
}
{{- end}}
