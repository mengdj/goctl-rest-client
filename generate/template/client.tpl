// Package {{.Package}}
// @file:{{.File}}
// @version:{{.Version}}
// Code generated by goctl-resty-client. DO NOT EDIT.
package {{.Package}}
import(
    "context"
    "github.com/mengdj/goctl-rest-client/conf"
    "github.com/mengdj/goctl-rest-client/factory"
    "github.com/mengdj/goctl-rest-client/factory/rest"
)
//go:generate fieldalignment -fix {{.File}}
//begin
type(
    {{range .Type}}
    {{range .Docs -}}
    {{.}}
    {{- end}}
    {{.RawName}} struct{
    {{if .Members}}
    {{if .Docs}} {{range .Docs}}
    {{- . -}}
    {{- end}}{{- end}}
    {{- range .Members}}
        {{- if .IsInline}}
            {{.Type.RawName}} {{if .Comment}}{{.Comment}}{{- end}}
        {{else}}
            {{.Name}} {{.Type.RawName}} {{if .Tag}}{{.Tag}}{{- end}} {{if .Comment}}{{.Comment}}{{- end}}
        {{- end}}
    {{- end}}
    {{- end}}
    }
    {{- end}}

    // Client
    Client interface{
        {{- range .Route -}}
        {{- range .Comment -}}
        // {{.}}
        {{- end}}
        // {{.Handler}}
        {{.Handler}}(context.Context{{if .RequestName}},*{{.RequestName}}{{- end}})(*{{.ResponseName}},error)
        {{- end}}
        Invoke(context.Context,string,string,interface{},interface{}) error
    }
    clientFactory struct{
        factory.Client
    }
)

{{- range $ind, $elem := .Type}}

func (t *{{$elem.RawName}}) Reset(){
    *t={{$elem.RawName}}{}
}
{{range $elem.Members}}
{{if not .IsInline}}
func (t *{{$elem.RawName}}) Set{{.Name}}(v {{.Type.RawName}}) *{{$elem.RawName}}{
    t.{{.Name}}=v
    return t
}

func (t *{{$elem.RawName}}) Get{{.Name}}() {{.Type.RawName}}{
    return t.{{.Name}}
}
{{- end}}
{{- end}}
{{- end}}

// MustClient
func MustClient(c conf.DiscoverClientConf,opts ...rest.RestOption) Client{
    return &clientFactory{
        Client:factory.NewRestDiscoverClient("{{.Destination}}",c,opts...),
    }
}

func (cf *clientFactory) Invoke(ctx context.Context,method string,path string,entity interface{},resp interface{}) error{
    return cf.Client.Invoke(ctx,method,path,entity,resp)
}

{{range .Route}}
{{range .Comment}}
// {{.}}
{{- end}}
// {{.Handler}} {{.Text}}
func (cf *clientFactory) {{.Handler}}(ctx context.Context{{if .RequestName}},entity *{{.RequestName}}{{- end}})(resp *{{.ResponseName}},err error){
    resp=new({{.ResponseName}})
    err=cf.Invoke(ctx,"{{.Method}}","{{.Path}}",{{if .RequestName}}entity{{else}}nil{{- end}},resp)
    if nil!=err{
        return nil,err
    }
    return resp,nil
}
{{- end}}
